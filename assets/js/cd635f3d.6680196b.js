"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1014],{3905:function(e,t,o){o.d(t,{Zo:function(){return c},kt:function(){return h}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var l=n.createContext({}),u=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(o),h=r,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return o?n.createElement(m,a(a({ref:t},c),{},{components:o})):n.createElement(m,a({ref:t},c))}));function h(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var u=2;u<i;u++)a[u]=o[u];return n.createElement.apply(null,a)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},5077:function(e,t,o){o.d(t,{Z:function(){return i}});var n=o(7294),r="caption_y_hk",i=function(e){var t=e.src,o=e.imgStyle,i=e.children;return n.createElement("div",{className:"text--center"},n.createElement("img",{style:o,src:t}),n.createElement("p",{className:r},i))}},6004:function(e,t,o){o.r(t),o.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return u},metadata:function(){return d},toc:function(){return h}});var n=o(7462),r=o(3366),i=(o(7294),o(3905)),a=o(9960),s=o(5077),l=["components"],u={slug:"introducing-furiko",title:"Introducing Furiko, an open-source, Kubernetes-native job platform",tags:["announcements","furiko"],authors:["irvinlim","shsjshentao"]},c=void 0,d={permalink:"/blog/introducing-furiko",editUrl:"https://github.com/furiko-io/website/tree/main/blog/2022-06-15-introducing-furiko/index.mdx",source:"@site/blog/2022-06-15-introducing-furiko/index.mdx",title:"Introducing Furiko, an open-source, Kubernetes-native job platform",description:"We're proud to officially introduce the Furiko project - an open-source, Kubernetes-native platform for scheduling, executing and managing ad-hoc and cron jobs. Furiko is able to schedule jobs to be run on a periodic or once-off basis, supports a wide variety of use cases, and is able to scale to millions of executions per day.",date:"2022-06-15T00:00:00.000Z",formattedDate:"June 15, 2022",tags:[{label:"announcements",permalink:"/blog/tags/announcements"},{label:"furiko",permalink:"/blog/tags/furiko"}],readingTime:6.865,truncated:!0,authors:[{name:"Irvin Lim",title:"Furiko Maintainer",url:"https://github.com/irvinlim",imageURL:"https://github.com/irvinlim.png",key:"irvinlim"},{name:"Shen Tao",title:"Furiko Maintainer",url:"https://github.com/shsjshentao",imageURL:"https://github.com/shsjshentao.png",key:"shsjshentao"}],frontMatter:{slug:"introducing-furiko",title:"Introducing Furiko, an open-source, Kubernetes-native job platform",tags:["announcements","furiko"],authors:["irvinlim","shsjshentao"]},nextItem:{title:"Refurbishing the Furiko Website",permalink:"/blog/welcome"}},p={authorsImageUrls:[void 0,void 0]},h=[{value:"Building Furiko internally",id:"building-furiko-internally",level:2},{value:"Why not just use Job/CronJob?",id:"why-not-just-use-jobcronjob",level:2},{value:"Designing Furiko",id:"designing-furiko",level:2},{value:"The Job object",id:"the-job-object",level:3},{value:"The JobConfig object",id:"the-jobconfig-object",level:3},{value:"JobQueueController",id:"jobqueuecontroller",level:3},{value:"Sharing Furiko with the world",id:"sharing-furiko-with-the-world",level:2},{value:"Try it out",id:"try-it-out",level:2}],m={toc:h};function b(e){var t=e.components,u=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},m,u,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We're proud to officially introduce the Furiko project - an open-source, Kubernetes-native platform for scheduling, executing and managing ad-hoc and cron jobs. Furiko is able to schedule jobs to be run on a periodic or once-off basis, supports a wide variety of use cases, and is able to scale to millions of executions per day."),(0,i.kt)(s.Z,{src:o(2907).Z,imgStyle:{background:"white",width:500,padding:"50px 100px"},mdxType:"CaptionedImage"},'The word "furiko" (\u632f\u308a\u5b50) means "pendulum" in Japanese. ',(0,i.kt)("br",null)," Logo designed by Duan Weiwei, distributed under CC-BY 4.0."),(0,i.kt)("h2",{id:"building-furiko-internally"},"Building Furiko internally"),(0,i.kt)("p",null,"To provide a bit of background, Furiko was initially developed in 2020 as an internal platform in Shopee. Our goal was to develop the next generation of a Kubernetes-based job platform for our internal users, known internally as ",(0,i.kt)("em",{parentName:"p"},"Runonce"),"."),(0,i.kt)("p",null,"At the time, we were still extensively using ",(0,i.kt)("a",{parentName:"p",href:"https://www.rundeck.com"},"Rundeck")," (now known as ",(0,i.kt)("a",{parentName:"p",href:"https://www.rundeck.com/open-source"},"PagerDuty Process Automation"),") as our main platform to schedule, execute and manage jobs across the company."),(0,i.kt)(s.Z,{src:o(9764).Z,mdxType:"CaptionedImage"},"Example job execution in Rundeck."," ",(0,i.kt)(a.Z,{to:"https://docs.rundeck.com/docs/manual/04-jobs.html#following-running-jobs",mdxType:"Link"},"Image source")),(0,i.kt)("p",null,"We were constantly tuning system and JVM parameters, but eventually found ourselves hitting a ceiling with regards to usability, reliability and performance. At one point, our Rundeck instance crashed every other week from running out of memory. This severely affected our users' trust in the platform when their jobs did not run, or when they were stuck indefinitely in an ",(0,i.kt)("em",{parentName:"p"},"Incomplete")," state. \ud83d\ude2d"),(0,i.kt)("p",null,"We sought to provide the same concepts and similar feature set that our users enjoyed while using Rundeck, but develop it as a Kubernetes-native platform so that we could thoroughly reap the benefits of a controller-based model to significantly improve the reliability and performance of the platform."),(0,i.kt)("h2",{id:"why-not-just-use-jobcronjob"},"Why not just use Job/CronJob?"),(0,i.kt)("p",null,"The biggest question is probably why we decided to rewrite the Job/CronJob controllers in Kubernetes in the first place. For the most part, they could fulfil our requirements, but our initial evaluation found several issues:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"We needed to support timezones in the CronJob (only recently introduced in v1.24)."),(0,i.kt)("li",{parentName:"ol"},"We wanted to support custom cron syntaxes, such as the ",(0,i.kt)("inlineCode",{parentName:"li"},"H")," format ",(0,i.kt)("a",{parentName:"li",href:"https://www.jenkins.io/doc/book/pipeline/syntax/#cron-syntax"},"found in Jenkins"),". This would greatly help to load balance a large number of CronJobs in a single cluster."),(0,i.kt)("li",{parentName:"ol"},"We wanted to automatically kill the Job if it remains pending for too long, in case the node has issues starting the container, causing the CronJob to get stuck until it is manually resolved."),(0,i.kt)("li",{parentName:"ol"},"We needed to automatically force delete Pods if the node is down and the controller is unable to kill the Job, which may also cause the CronJob to get stuck until the node is recovered."),(0,i.kt)("li",{parentName:"ol"},"We need to ensure that if the CronJob has currently running Jobs, it should not allow a new ad-hoc Job to be run."),(0,i.kt)("li",{parentName:"ol"},"We cannot guarantee that workloads will not be executed more than once, such as from deleting the Pod or being evicted by ",(0,i.kt)("inlineCode",{parentName:"li"},"kube-controller-manager"),". This was especially important to prevent double-write issues, such as jobs which perform financial transactions."),(0,i.kt)("li",{parentName:"ol"},"At the time, ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/kubernetes/kubernetes/pull/93370"},"CronJobControllerV2")," did not yet exist, and several performance problems riddled the V1 controller. Because it did not use the informer pattern, Jobs were not scheduled timely and the controller could not scale to reconcile thousands of Jobs concurrently.")),(0,i.kt)(s.Z,{src:o(7420).Z,mdxType:"CaptionedImage"},"Similar feedback on limitations of the CronJob controller."," ",(0,i.kt)(a.Z,{to:"https://github.com/kubernetes/kubernetes/issues/47538#issuecomment-549080643",mdxType:"Link"},"GitHub")),(0,i.kt)("p",null,"To add on, we were also looking to support features that were already existing in Rundeck in order to migrate our existing customers to the new platform based on Kubernetes. These features included but were not limited to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Specify job parameters, allowing us to use a single job as a template."),(0,i.kt)("li",{parentName:"ol"},"Schedule a job for later, rather than executing it immediately."),(0,i.kt)("li",{parentName:"ol"},"Enqueue a bunch of jobs to be run after the previous one finishes, such that they will not run concurrently."),(0,i.kt)("li",{parentName:"ol"},"Support complex job workflows."),(0,i.kt)("li",{parentName:"ol"},"Send notifications when a job starts, finishes, fails, etc.")),(0,i.kt)(s.Z,{src:o(8998).Z,mdxType:"CaptionedImage"},"Example of parameterizing a job in Rundeck."),(0,i.kt)("p",null,"With all of the above in mind, we made a deliberate but painful choice to reinvent the wheel, because the existing controllers in core Kubernetes had no way to support some of these use cases without a complete redesign from scratch. \ud83d\ude13"),(0,i.kt)("h2",{id:"designing-furiko"},"Designing Furiko"),(0,i.kt)("p",null,"Our initial design introduced the following concepts and ideas, which are roughly inspired from both Kubernetes and Rundeck."),(0,i.kt)("h3",{id:"the-job-object"},"The Job object"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/job"},(0,i.kt)("strong",{parentName:"a"},"Job"))," is a single job execution, much like the K8s equivalent. If a JobConfig is scheduled to run every 3 hours, a new Job will be created every 3 hours."),(0,i.kt)("p",null,"The Job object should support features present in K8s, such as ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/job/parallelism"},"parallelism")," and retry limits. In addition, we also implemented additional features, such as ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/job/timeout-retries#retries"},"retries using separate Pods"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/job/timeout-retries#task-level-timeouts"},"pending timeouts"),", etc."),(0,i.kt)("p",null,"Users should not be interacting with the Job object directly most of the time, but instead interact directly with its parent, the JobConfig."),(0,i.kt)("h3",{id:"the-jobconfig-object"},"The JobConfig object"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig"},(0,i.kt)("strong",{parentName:"a"},"JobConfig"))," (roughly equivalent CronJob in K8s) is a single configuration (or template) for how jobs should be executed."),(0,i.kt)("p",null,"The JobConfig includes configuration such as ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/scheduling"},"automatic scheduling"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/concurrency"},"concurrency handling"),", ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/job-options"},"job options"),", and so on."),(0,i.kt)("p",null,"The difference from CronJob is that all Jobs ",(0,i.kt)("em",{parentName:"p"},"should")," be created via its parent JobConfig. By having this assumption, we can track and observe the status of all Jobs for a single JobConfig. In addition, this also provides better user experience since we can now validate and add default parameters ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/job/adhoc-execution#optionvalues"},"when running a Job manually"),"."),(0,i.kt)("h3",{id:"jobqueuecontroller"},"JobQueueController"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/development/architecture/execution-controller#jobqueuecontroller"},(0,i.kt)("strong",{parentName:"a"},"JobQueueController"))," is responsible for ",(0,i.kt)("em",{parentName:"p"},"admitting")," a Job to be started, based on some concurrency or scheduling constraints. It is responsible for the following:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"If the JobConfig is using the ",(0,i.kt)("a",{parentName:"li",href:"/docs/execution/jobconfig/concurrency#policy"},(0,i.kt)("inlineCode",{parentName:"a"},"Forbid")," concurrency policy"),", it will not admit a Job when other Jobs are not yet finished."),(0,i.kt)("li",{parentName:"ol"},"If the Job is not due to be started (using ",(0,i.kt)("a",{parentName:"li",href:"/docs/execution/job/start-policy#startafter"},(0,i.kt)("inlineCode",{parentName:"a"},"startAfter")),"), it will not yet be admitted."),(0,i.kt)("li",{parentName:"ol"},"Ensuring FIFO ordering of Jobs to be admitted based on their creation time (assuming no other constraints apply).")),(0,i.kt)("p",null,"This design allows us to move closer towards the user experience that our users enjoyed on Rundeck, while providing the reliability guarantees that allow our users to place trust in running millions of workloads a day in the company."),(0,i.kt)("h2",{id:"sharing-furiko-with-the-world"},"Sharing Furiko with the world"),(0,i.kt)("p",null,"Fast forward two years later, we were thrilled to have been receiving positive feedback for our internal Runonce platform. We were running millions of executions per day across multiple Kubernetes clusters, and >99.999% on-time scheduling rate (i.e. almost no jobs were detected as overdue via monitoring)."),(0,i.kt)("p",null,"At the same time, we found that there was no comprehensive, open-source, Kubernetes-native cron job platform available yet. As such, we decided to work on open-sourcing ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/furiko-io/furiko"},"Furiko")," with the rest of the community! \ud83e\udd73"),(0,i.kt)("p",null,"Although core Kubernetes has made significant strides with regards to the CronJob controller recently (such as CronJobControllerV2 and timeZone support as of v1.24), we still found significant gaps that were not completely addressed. Additionally, we also know that existing tools such as ",(0,i.kt)("a",{parentName:"p",href:"https://argoproj.github.io/workflows"},"Argo Workflows")," have similar functionality, but we believe that Furiko may be better positioned to focus on time-based scheduling of jobs on a massive scale."),(0,i.kt)("p",null,"Although initially developed as an internal platform inside of the company, ",(0,i.kt)("strong",{parentName:"p"},"Furiko is and will always be 100% open source"),". There are several features that are currently only available in our internal Runonce platform, but we remain hard at work to port over features or ideas from our internal version where appropriate. We also have started working on a community-maintained roadmap for Furiko, which can be found ",(0,i.kt)("a",{parentName:"p",href:"/docs/contributing/roadmap"},"here"),"."),(0,i.kt)("p",null,"We are still currently very early in our development of Furiko, and we welcome all contributions big or small. To find out more, check out our ",(0,i.kt)("a",{parentName:"p",href:"/docs/contributing/overview"},"Contribution Guide"),"."),(0,i.kt)("h2",{id:"try-it-out"},"Try it out"),(0,i.kt)("p",null,"Check out Furiko on ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/furiko-io/furiko"},"GitHub"),", or the ",(0,i.kt)("a",{parentName:"p",href:"/docs/getting-started/install"},"installation guide")," to get started on a Kubernetes cluster in less than a minute."),(0,i.kt)("p",null,"To view the full list of features of Furiko, check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/features"},"Features")," page."),(0,i.kt)("p",null,"Let us know what you think! We are open to questions and feature requests over at our ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/furiko-io/furiko/discussions"},"GitHub Discussions page"),", or you can simply ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/furiko-io/furiko/issues"},"open an issue")," on our project on GitHub."))}b.isMDXComponent=!0},7420:function(e,t,o){t.Z=o.p+"assets/images/k8s-cronjob-adhoc-concurrency-policy-45b064381581af3b57adbd94d90ba13b.png"},9764:function(e,t,o){t.Z=o.p+"assets/images/rundeck-execution-c42a9194745675f44aec41807ce12e33.png"},8998:function(e,t,o){t.Z=o.p+"assets/images/rundeck-job-options-a2f10d60b538c4eda55d6813ca94e944.png"},2907:function(e,t,o){t.Z=o.p+"assets/images/color_horizontal-96fb6c6b17735c4e0bfa161dc86123a4.png"}}]);