"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7346],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return p}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),p=o,h=d["".concat(l,".").concat(p)]||d[p]||f[p]||i;return r?t.createElement(h,a(a({ref:n},u),{},{components:r})):t.createElement(h,a({ref:n},u))}));function p(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3894:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return f}});var t=r(7462),o=r(3366),i=(r(7294),r(3905)),a=["components"],c={sidebar_position:11,sidebar_label:"Controller Config"},l="Execution Controller Config",s={unversionedId:"reference/configuration/execution/controller-config",id:"version-v0.2.1/reference/configuration/execution/controller-config",title:"Execution Controller Config",description:"This page contains the full bootstrap configuration for ExecutionController.",source:"@site/versioned_docs/version-v0.2.1/reference/configuration/execution/controller-config.md",sourceDirName:"reference/configuration/execution",slug:"/reference/configuration/execution/controller-config",permalink:"/docs/reference/configuration/execution/controller-config",draft:!1,editUrl:"https://github.com/furiko-io/website/tree/main/versioned_docs/version-v0.2.1/reference/configuration/execution/controller-config.md",tags:[],version:"v0.2.1",sidebarPosition:11,frontMatter:{sidebar_position:11,sidebar_label:"Controller Config"},sidebar:"tutorialSidebar",previous:{title:"Controller Flags",permalink:"/docs/reference/configuration/execution/controller-flags"},next:{title:"Webhook Flags",permalink:"/docs/reference/configuration/execution/webhook-flags"}},u={},f=[],d={toc:f};function p(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"execution-controller-config"},"Execution Controller Config"),(0,i.kt)("p",null,"This page contains the full ",(0,i.kt)("a",{parentName:"p",href:"/docs/operator-manual/configuration/bootstrap"},"bootstrap configuration")," for ExecutionController."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# Here we define the bootstrap config for execution-controller.\n# These values are used for bootstrapping of the controller manager at startup,\n# so changing any values here require a restart of execution-controller in order\n# to take effect.\napiVersion: config.furiko.io/v1\nkind: ExecutionControllerConfig\n\n# defaultResync controls the default resync duration.\ndefaultResync: 10m\n\n# leaderElection controls leader election configuration.\nleaderElection:\n  # enabled controls whether leader election is enabled.\n  enabled: true\n\n  # leaseName controls the name used for the lease.\n  # If left empty, then a default name will be used.\n  leaseName: execution-controller\n\n  # leaseNamespace controls the namespace used for the lease.\n  leaseNamespace: furiko-system\n\n  # leaseDuration is the duration that non-leader candidates will wait after\n  # observing a leadership renewal until attempting to acquire leadership of a\n  # led but unrenewed leader slot. This is effectively the maximum duration that\n  # a leader can be stopped before it is replaced by another candidate. This is\n  # only applicable if leader election is enabled.\n  leaseDuration: 30s\n\n  # renewDeadline is the interval between attempts by the acting master to renew\n  # a leadership slot before it stops leading. This must be less than or equal to\n  # the lease duration. This is only applicable if leader election is enabled.\n  renewDeadline: 15s\n\n  # retryPeriod is the duration the clients should wait between attempting\n  # acquisition and renewal of a leadership. This is only applicable if leader\n  # election is enabled.\n  retryPeriod: 5s\n\n# dynamicConfigs defines how to load dynamic configs.\ndynamicConfigs:\n  # configMap defines how the dynamic ConfigMap is loaded.\n  configMap:\n    namespace: furiko-system\n    name: execution-dynamic-config\n\n  # secret defines how the dynamic Secret is loaded.\n  secret:\n    namespace: furiko-system\n    name: execution-dynamic-config\n\n# HTTP handler configuration.\nhttp:\n  # bindAddress is the TCP address that the controller should bind to for serving\n  # HTTP requests.\n  bindAddress: ":8080"\n\n  # metrics controls metrics serving.\n  metrics:\n    # enabled is whether the controller manager enables serving Prometheus metrics.\n    enabled: true\n\n  # health controls health status serving.\n  health:\n    # enabled is whether the controller manager enables serving health probes.\n    enabled: true\n\n    # readinessProbePath is the path to the readiness probe.\n    readinessProbePath: "/readyz"\n\n    # livenessProbePath is the path to the liveness probe.\n    livenessProbePath: "/healthz"\n\n# controllerConcurrency defines the concurrency factor for individual controllers.\ncontrollerConcurrency:\n  # cron controls the concurrency for the Cron controller.\n  cron:\n    factorOfCPUs: 4\n\n  # job controls the concurrency for the Job controller.\n  job:\n    factorOfCPUs: 4\n\n  # jobConfig controls the concurrency for the JobConfig controller.\n  jobConfig:\n    factorOfCPUs: 4\n\n  # jobQueue controls the concurrency for the JobQueue controller.\n  jobQueue:\n    factorOfCPUs: 4\n')))}p.isMDXComponent=!0}}]);