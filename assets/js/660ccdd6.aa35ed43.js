"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2821],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=l,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1555:function(e,t,n){n.r(t),n.d(t,{assets:function(){return w},contentTitle:function(){return y},default:function(){return j},frontMatter:function(){return v},metadata:function(){return N},toc:function(){return x}});var a=n(7462),l=n(3366),r=n(7294),i=n(3905),o=n(6010),s=n(2389),u=n(7392),p=n(7094),c=n(2466),d="tabList__CuJ",m="tabItem_LNqP";function h(e){var t,n,l=e.lazy,i=e.block,s=e.defaultValue,h=e.values,k=e.groupId,f=e.className,b=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=h?h:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,u.l)(g,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var y=null===s?s:null!=(t=null!=s?s:null==(n=b.find((function(e){return e.props.default})))?void 0:n.props.value)?t:b[0].props.value;if(null!==y&&!g.some((function(e){return e.value===y})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+g.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,p.U)(),w=N.tabGroupChoices,x=N.setTabGroupChoices,C=(0,r.useState)(y),j=C[0],T=C[1],O=[],S=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=k){var E=w[k];null!=E&&E!==j&&g.some((function(e){return e.value===E}))&&T(E)}var P=function(e){var t=e.currentTarget,n=O.indexOf(t),a=g[n].value;a!==j&&(S(t),T(a),null!=k&&x(k,String(a)))},A=function(e){var t,n=null;switch(e.key){case"ArrowRight":var a,l=O.indexOf(e.currentTarget)+1;n=null!=(a=O[l])?a:O[0];break;case"ArrowLeft":var r,i=O.indexOf(e.currentTarget)-1;n=null!=(r=O[i])?r:O[O.length-1]}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},f)},g.map((function(e){var t=e.value,n=e.label,l=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:j===t?0:-1,"aria-selected":j===t,key:t,ref:function(e){return O.push(e)},onKeyDown:A,onFocus:P,onClick:P},l,{className:(0,o.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":j===t})}),null!=n?n:t)}))),l?(0,r.cloneElement)(b.filter((function(e){return e.props.value===j}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},b.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==j})}))))}function k(e){var t=(0,s.Z)();return r.createElement(h,(0,a.Z)({key:String(t)},e))}var f="tabItem_Ymn6";function b(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(f,a),hidden:n},t)}var g=["components"],v={sidebar_position:40},y="Parallelism",N={unversionedId:"execution/job/parallelism",id:"execution/job/parallelism",title:"Parallelism",description:"This page will discuss how to run multiple tasks in parallel for a single Job.",source:"@site/docs/execution/job/parallelism.mdx",sourceDirName:"execution/job",slug:"/execution/job/parallelism",permalink:"/docs/execution/job/parallelism",draft:!1,editUrl:"https://github.com/furiko-io/website/tree/main/docs/execution/job/parallelism.mdx",tags:[],version:"current",sidebarPosition:40,frontMatter:{sidebar_position:40},sidebar:"tutorialSidebar",previous:{title:"Start Policy",permalink:"/docs/execution/job/start-policy"},next:{title:"Timeouts and Retries",permalink:"/docs/execution/job/timeout-retries"}},w={},x=[{value:"Motivation",id:"motivation",level:2},{value:"Sample Configuration",id:"sample-configuration",level:2},{value:"Configuration Options",id:"configuration-options",level:2},{value:"<code>withCount</code>",id:"withcount",level:3},{value:"<code>withKeys</code>",id:"withkeys",level:3},{value:"<code>withMatrix</code>",id:"withmatrix",level:3},{value:"<code>completionStrategy</code>",id:"completionstrategy",level:3},{value:"<code>AllSuccessful</code>",id:"allsuccessful",level:4},{value:"<code>AnySuccessful</code>",id:"anysuccessful",level:4}],C={toc:x};function j(e){var t=e.components,n=(0,l.Z)(e,g);return(0,i.kt)("wrapper",(0,a.Z)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"parallelism"},"Parallelism"),(0,i.kt)("p",null,"This page will discuss how to run multiple tasks in parallel for a single Job."),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"A single Job without parallelism will have at most one task running at any time, which corresponds to a single Pod (if the ",(0,i.kt)("inlineCode",{parentName:"p"},"pod")," ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/job/task-executor"},"task executor")," is used)."),(0,i.kt)("p",null,"Assume we have a JobConfig for processing all rows in a database, and is ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/scheduling"},"scheduled")," to run every day, which creates a Job (and thus a Pod) that will run to completion every day. Over time as the database grows in size, the Job may take longer to run since it now has more items to process, and may eventually take too long for business requirements. Apart from vertically scaling the Pod, you may wish to parallelize the job processing into multiple partitions, which can be achieved by specifying the number of partitions via ",(0,i.kt)("a",{parentName:"p",href:"#withcount"},(0,i.kt)("inlineCode",{parentName:"a"},"withCount")),"."),(0,i.kt)("p",null,"Other means of expanding a job into multiple parallel tasks include one parallel task for each item in a list (",(0,i.kt)("a",{parentName:"p",href:"#withkeys"},(0,i.kt)("inlineCode",{parentName:"a"},"withKeys")),"), or for each combination of values in a matrix (",(0,i.kt)("a",{parentName:"p",href:"#withmatrix"},(0,i.kt)("inlineCode",{parentName:"a"},"withMatrix")),")."),(0,i.kt)("p",null,"The equivalent feature in Kubernetes is ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/blog/2021/04/19/introducing-indexed-jobs/"},"Indexed Jobs"),"."),(0,i.kt)("h2",{id:"sample-configuration"},"Sample Configuration"),(0,i.kt)(k,{mdxType:"Tabs"},(0,i.kt)(b,{value:"withCount",label:"With Count",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,"apiVersion: execution.furiko.io/v1alpha1\nkind: Job\nspec:\n  parallelism:\n    withCount: 3\n    completionStrategy: AllSuccessful\n  template:\n    taskTemplate:\n      pod:\n        spec:\n          containers:\n            - name: job-container\n              image: my-image\n              args:\n                - ./bin/consume -shard-index=${task.index_num}\n")),(0,i.kt)(b,{value:"withKeys",label:"With Keys",mdxType:"TabItem"},(0,i.kt)("pre",null,"apiVersion: execution.furiko.io/v1alpha1\nkind: Job\nspec:\n  parallelism:\n    withKeys:\n      - golang\n      - python\n      - nodejs\n    completionStrategy: AllSuccessful\n  template:\n    taskTemplate:\n      pod:\n        spec:\n          containers:\n            - name: job-container\n              image: my-image\n              args:\n                - ./bin/run -lang=${task.index_key}\n")),(0,i.kt)(b,{value:"withMatrix",label:"With Matrix",mdxType:"TabItem"},(0,i.kt)("pre",null,"apiVersion: execution.furiko.io/v1alpha1\nkind: Job\nspec:\n  parallelism:\n    withMatrix:\n      goos:\n        - linux\n        - darwin\n      goarch:\n        - amd64\n        - arm64\n    completionStrategy: AllSuccessful\n  template:\n    taskTemplate:\n      pod:\n        spec:\n          containers:\n            - name: job-container\n              image: my-image\n              env:\n                - name: GOOS\n                  value: ${task.index_matrix.goos}\n                - name: GOARCH\n                  value: ${task.index_matrix.goarch}\n              args:\n                - go build ./..."))),(0,i.kt)("h2",{id:"configuration-options"},"Configuration Options"),(0,i.kt)("p",null,"Exactly one of ",(0,i.kt)("inlineCode",{parentName:"p"},"withCount"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"withKeys"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"withMatrix")," must be specified."),(0,i.kt)("h3",{id:"withcount"},(0,i.kt)("inlineCode",{parentName:"h3"},"withCount")),(0,i.kt)("p",null,"Specifies the number of parallel tasks to be executed in parallel. Must be a positive integer."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"withCount")," is used, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"task.index_num")," context variable will be available to substitute the index number (from 0 to N-1) as a ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/context-variables"},"context variable"),"."),(0,i.kt)("h3",{id:"withkeys"},(0,i.kt)("inlineCode",{parentName:"h3"},"withKeys")),(0,i.kt)("p",null,"Specifies keys that will correspond to each parallel task."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"withKeys")," is used, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"task.index_key")," context variable will be available to substitute the index key as a ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/context-variables"},"context variable"),"."),(0,i.kt)("p",null,"Each key must be a non-empty string."),(0,i.kt)("h3",{id:"withmatrix"},(0,i.kt)("inlineCode",{parentName:"h3"},"withMatrix")),(0,i.kt)("p",null,"Specifies a matrix of key-value pairs, such that each matrix combination will correspond to each parallel task. For example, given the following configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"withMatrix:\n  goos:\n    - linux\n    - darwin\n    - windows\n  goarch:\n    - amd64\n    - arm64\n")),(0,i.kt)("p",null,"A total of 6 tasks will be run in parallel:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Task"),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"th"},"goos")),(0,i.kt)("th",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"th"},"goarch")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"0"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"linux")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amd64"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"linux")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"arm64"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"2"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"darwin")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amd64"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"3"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"darwin")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"arm64"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"4"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"windows")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"amd64"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},"5"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"windows")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"arm64"))))),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"withMatrix")," is used, then the ",(0,i.kt)("inlineCode",{parentName:"p"},"task.index_matrix.<key>")," context variable will be available to substitute the index key as a ",(0,i.kt)("a",{parentName:"p",href:"/docs/execution/jobconfig/context-variables"},"context variable"),"."),(0,i.kt)("p",null,"Each key must be a non-empty string and contain only lowercase letters, numbers, underscores, and dashes. Each value must be a non-empty string."),(0,i.kt)("h3",{id:"completionstrategy"},(0,i.kt)("inlineCode",{parentName:"h3"},"completionStrategy")),(0,i.kt)("p",null,"Determines when the Job is complete when multiple tasks are running in parallel."),(0,i.kt)("p",null,"Must be one of the following values."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#allsuccessful"},(0,i.kt)("inlineCode",{parentName:"a"},"AllSuccessful"))),(0,i.kt)("td",{parentName:"tr",align:null},"Completed only once each parallel index has succeeded.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("a",{parentName:"td",href:"#anysuccessful"},(0,i.kt)("inlineCode",{parentName:"a"},"AnySuccessful"))),(0,i.kt)("td",{parentName:"tr",align:null},"Completed when any parallel index has succeeeded.")))),(0,i.kt)("h4",{id:"allsuccessful"},(0,i.kt)("inlineCode",{parentName:"h4"},"AllSuccessful")),(0,i.kt)("p",null,"This strategy means that the Job is completed only once each parallel index has succeeded, and the completion strategy is deemed to have succeeded."),(0,i.kt)("p",null,"If any parallel index has exhausted all its retries (i.e. it has failed), then the completion strategy is deemed to have failed. All remaining tasks will be terminated."),(0,i.kt)("h4",{id:"anysuccessful"},(0,i.kt)("inlineCode",{parentName:"h4"},"AnySuccessful")),(0,i.kt)("p",null,"This strategy means that the Job is completed when any parallel index has succeeeded, and the completion strategy is deemed to have succeeded. All remaining tasks will be terminated."),(0,i.kt)("p",null,"If all parallel indexes have exhausted all of their retries (i.e. it has failed), only then will the completion strategy be deemed to have failed."))}j.isMDXComponent=!0}}]);